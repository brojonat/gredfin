// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: realtor_query.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRealtor = `-- name: CreateRealtor :one
INSERT INTO realtor (
  realtor_id, realtor_name, realtor_region, property_id, listing_id, list_price
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING realtor_id, realtor_name, realtor_region, property_id, listing_id, list_price
`

type CreateRealtorParams struct {
	RealtorID     int32       `json:"realtor_id"`
	RealtorName   pgtype.Text `json:"realtor_name"`
	RealtorRegion pgtype.Text `json:"realtor_region"`
	PropertyID    string      `json:"property_id"`
	ListingID     string      `json:"listing_id"`
	ListPrice     pgtype.Int4 `json:"list_price"`
}

func (q *Queries) CreateRealtor(ctx context.Context, arg CreateRealtorParams) (Realtor, error) {
	row := q.db.QueryRow(ctx, createRealtor,
		arg.RealtorID,
		arg.RealtorName,
		arg.RealtorRegion,
		arg.PropertyID,
		arg.ListingID,
		arg.ListPrice,
	)
	var i Realtor
	err := row.Scan(
		&i.RealtorID,
		&i.RealtorName,
		&i.RealtorRegion,
		&i.PropertyID,
		&i.ListingID,
		&i.ListPrice,
	)
	return i, err
}

const deleteRealtor = `-- name: DeleteRealtor :exec
DELETE FROM realtor
WHERE realtor_id = $1
`

func (q *Queries) DeleteRealtor(ctx context.Context, realtorID int32) error {
	_, err := q.db.Exec(ctx, deleteRealtor, realtorID)
	return err
}

const getRealtor = `-- name: GetRealtor :one
SELECT realtor_id, realtor_name, realtor_region, property_id, listing_id, list_price FROM realtor
WHERE realtor_id = $1 LIMIT 1
`

func (q *Queries) GetRealtor(ctx context.Context, realtorID int32) (Realtor, error) {
	row := q.db.QueryRow(ctx, getRealtor, realtorID)
	var i Realtor
	err := row.Scan(
		&i.RealtorID,
		&i.RealtorName,
		&i.RealtorRegion,
		&i.PropertyID,
		&i.ListingID,
		&i.ListPrice,
	)
	return i, err
}

const getRealtorsByName = `-- name: GetRealtorsByName :many
SELECT realtor_id, realtor_name, realtor_region, property_id, listing_id, list_price FROM realtor
WHERE realtor_name = $1
`

func (q *Queries) GetRealtorsByName(ctx context.Context, realtorName pgtype.Text) ([]Realtor, error) {
	rows, err := q.db.Query(ctx, getRealtorsByName, realtorName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Realtor
	for rows.Next() {
		var i Realtor
		if err := rows.Scan(
			&i.RealtorID,
			&i.RealtorName,
			&i.RealtorRegion,
			&i.PropertyID,
			&i.ListingID,
			&i.ListPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRealtors = `-- name: ListRealtors :many
SELECT realtor_id, realtor_name, realtor_region, property_id, listing_id, list_price FROM realtor
ORDER BY realtor_name
`

func (q *Queries) ListRealtors(ctx context.Context) ([]Realtor, error) {
	rows, err := q.db.Query(ctx, listRealtors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Realtor
	for rows.Next() {
		var i Realtor
		if err := rows.Scan(
			&i.RealtorID,
			&i.RealtorName,
			&i.RealtorRegion,
			&i.PropertyID,
			&i.ListingID,
			&i.ListPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postRealtor = `-- name: PostRealtor :exec
UPDATE realtor
  SET realtor_name = $2,
  realtor_region = $3,
  property_id = $4,
  listing_id = $5,
  list_price = $6
WHERE realtor_id = $1
`

type PostRealtorParams struct {
	RealtorID     int32       `json:"realtor_id"`
	RealtorName   pgtype.Text `json:"realtor_name"`
	RealtorRegion pgtype.Text `json:"realtor_region"`
	PropertyID    string      `json:"property_id"`
	ListingID     string      `json:"listing_id"`
	ListPrice     pgtype.Int4 `json:"list_price"`
}

func (q *Queries) PostRealtor(ctx context.Context, arg PostRealtorParams) error {
	_, err := q.db.Exec(ctx, postRealtor,
		arg.RealtorID,
		arg.RealtorName,
		arg.RealtorRegion,
		arg.PropertyID,
		arg.ListingID,
		arg.ListPrice,
	)
	return err
}
